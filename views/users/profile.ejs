<% layout('layouts/boilerplate') %>

<div class="row pt-2 pb-5 px-4">
    <div class="col-lg-8 mx-auto">
        <!-- Profile widget -->
        <div class="bg-white shadow rounded overflow-hidden">
            <div class="px-4 pt-0 pb-4 cover">
                <% if (currentUser && String(user._id) === String(currentUser._id)) { %> 
                <a href="/profile/<%= user._id %>/edit" class="btn custom-button mt-3 d-block">Edit profile</a>
                <% } %> 
                <div class="media align-items-end profile-head d-flex justify-content-center">
                    <div class="profile">
                        <% if (user.profile.images.length) { %> 
                        <img src="<%= user.profile.images[0].url %> " alt="user selfie" width="130" class="rounded mb-2 img-thumbnail">
                        <% } else { %> 
                            <%- include('../partials/svg/unknown-avatar') %>
                        <% } %> 
                    </div>
                    <div class="media-body mb-5 ms-2">
                        <h4 class="mt-0 mb-0 tertiary-heading"><%= user.profile.name ? user.profile.name : 'Name not set.' %></h4>
                        <p class="small mb-4 subheading"><%= user.profile.location ? user.profile.location : 'Location not set.' %></p>
                    </div>
                </div>
            </div>
            <div class="bg-light p-4 d-flex justify-content-end text-center">
                <ul class="list-inline mb-0 w-100 d-flex justify-content-between ps-5">
                    <span>
                        <br>
                        <li class="list-inline-item mt-1">
                            <h5 class="font-weight-bold mb-0 d-block" id="username">@<%= user.username ? user.username : '' %></h5>
                        </li>
                    </span>
                    <span class="mt-1">
                        <li class="list-inline-item">
                            <h5 class="font-weight-bold mb-0 d-block"><%= booksOffered ? booksOffered : 0 %> </h5><small class="text-muted">Offered</small>
                        </li>
                        <li class="list-inline-item">
                            <h5 class="font-weight-bold mb-0 d-block">215</h5><small class="text-muted">Borrowed</small>
                        </li>
                    </span>
                </ul>
            </div>
            <!-- send message modal button -->
            <% if (currentUser && String(user._id) !== String(currentUser._id)) { %>
                <div class="d-flex justify-content-end m-3"><button type="button" class="btn custom-button" data-toggle="modal" data-target="#sendMessageModal">Send message</button></div>
            <% } %> 
            <!-- inbox modal button -->
            <% if (currentUser && String(user._id) === String(currentUser._id)) { %>
                <div class="d-flex justify-content-end m-3"><button type="button" class="btn custom-button" data-toggle="modal" data-target="#inboxModal">Inbox</button></div>
            <% } %> 

            <div class="px-4 py-3">
                <h5 class="mb-0 tertiary-heading">About</h5>
                <div class="p-4 rounded shadow-sm bg-light">
                    <p class="font-italic mb-0"><%= user.profile.bio || "Write your bio here..."%></p>
                </div>
            </div>
            <div class="py-4 px-4">
                <div class="d-flex align-items-center justify-content-between mb-3">
                    <h5 class="mb-0 tertiary-heading">Recent favorites</h5>
                </div>
                <div  class="d-flex mb-2 flex-wrap justify-content-center">
                    <% if (user.profile.favorites.length) { %> 
                        <% for (let favorite of user.profile.favorites) { %> 
                            <a href="/books/<%= favorite._id %>" class="mb-3 me-3"><img src="<%= favorite.coverImg %> " alt="" class="img-fluid rounded shadow-sm" style="height:200px; width: auto;"></a>
                        <% } %> 
                    <% } else { %> 
                        <div class="d-flex justify-content-between align-items-center my-3"><a class="quaternary-heading" href="/books">Browse books</a></div>
                    <% } %> 
                </div>
            </div>
            <div class="py-4 px-4">
                <div class="d-flex align-items-center justify-content-between mb-3">
                    <h5 class="mb-0 tertiary-heading">Recently offered</h5>
                </div>
                <div  class="d-flex mb-2 flex-wrap justify-content-center">
                    <% if (books.length) { %> 
                        <% for (let book of books) { %> 
                            <a href="/books/<%= book._id %>" class="mb-3 me-3"><img src="<%= book.coverImg %> " alt="" class="img-fluid rounded shadow-sm" style="height:200px; width: auto;"></a>
                        <% } %> 
                    <% } else { %> 
                        <div class="d-flex justify-content-between align-items-center my-3"><a class="quaternary-heading" href="/books/new">Offer books</a></div>
                    <% } %> 
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="sendMessageModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="sendMessageModalLabel">New message</h5>
          <button type="button" class="close custom-close-button" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <form action="/message/<%= user._id %>" method="POST">
            <div class="modal-body">
                <div class="form-group">
                <label for="recipient-name" class="col-form-label">Recipient:</label>
                <input type="text" class="form-control" id="recipient-name" name="message[username]" value="<%= user.username %>">
                </div>
                <div class="form-group">
                <label for="message-text" class="col-form-label">Message:</label>
                <textarea class="form-control" id="message-text" name="message[content]"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary">Send message</button>
            </div>
        </form>
      </div>
    </div>
  </div>

<!-- Inbox -->
<div class="modal fade d-flex flex-column align-items-stretch flex-shrink-0 bg-white hide" style="width: 380px;" id="inboxModal" tabindex="-1" role="inbox" aria-labelledby="inboxModalLabel" aria-hidden="true">
    <button type="button" class="close custom-close-button" data-dismiss="modal" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
    <div class="modal-dialog" role="document">
        <div class="d-flex justify-content-between align-items-center">
            <div class="secondary-heading">
                <h5 class="modal-title" id="sendMessageModalLabel">Inbox</h5>
            </div>
        </div>
    </div>
    <hr class="mb-0">
    <div class="list-group list-group-flush border-bottom scrollarea" id="inboxMessages">
    <% if (user.profile.inbox.length) { %>  
    <% for (let chatPartner of user.profile.inbox) { %> 
        <% const newestMsg = chatPartner.messages.length - 1 %>     
        <a class="btn list-group-item list-group-item-action py-3 lh-tight pointer" aria-current="true" 
        id="<%= chatPartner._id %>">
            <div class="d-flex w-100 align-items-center justify-content-between">
                <strong class="mb-1" id="<%= chatPartner.partnerUsername %>"><%=chatPartner.partnerUsername%><% if (chatPartner.isUnreadMsg) { %><span class="badge badge-secondary custom-badge ms-2">New</span><% } %></strong>
                <small id="<%= chatPartner._id %>-date">
                    <%= 
                        `${chatPartner.messages[newestMsg].timestamp.toISOString().slice(0, 10).replace('T', ' ')}`
                    %>
                </small>
            </div>
            <div class="col-10 mb-1 small mt-2">
                <strong class="mb-1" id="<%= chatPartner.partnerUsername %>-username"><%= chatPartner.messages[newestMsg].username %>:</strong>
                <span id="<%= chatPartner.partnerUsername %>-message">
                    <%= chatPartner.messages[newestMsg].message.length > 51 ? `${chatPartner.messages[newestMsg].message.slice(0, 50)} ...` : chatPartner.messages[newestMsg].message %>
                </span>
            </div>
        </a>
    <% } %> 
    <% } else { %> 
    <p class="m-0 p-4">No messages - go to a user's profile and send them a message to start a conversation</p>
    <% } %> 
    </div>
</div>

<!-- Messages Modal -->
<button type="button" class="btn custom-button" data-toggle="modal" data-target="#messagesModal" style="display: none;" id="messageModalButton">messages</button>

<div class="modal fade" id="messagesModal" tabindex="-1" role="dialog" aria-labelledby="messagesLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title secondary-heading">Chat</h5>
          <button type="button" class="close custom-close-button" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
            <div class="modal-body">
                <div class="form-group px-2" id="messagesModal__chatContainer"></div>
                <div class="form-group">
                    <label for="message-text" class="col-form-label">Message:</label>
                    <textarea class="form-control" id="messagesModal__messageText"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="sendMessageButton">Send message</button>
            </div>
      </div>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
      const socket = io();
      socket.auth = { userId: "<%= currentUser._id %>" };
      socket.connect();

      let connectedUsers;
  
      socket.on('users', (users) => {
          connectedUsers = users;
      });
  
      socket.on('private message', ({ content, from }) => {
          if (document.getElementById('messagesModal__chatContainer')) {
              pushMessage(content, from);
          }
      });

    // Modify this error to be more useful at a later time
      socket.on("connect_error", (err) => {
        if (err.message === "invalid username") {
           console.log('You must be signed in to use chat.');
        }
      });

      function pushMessage(message, from, to) {
        const inbox = document.getElementById('inboxMessages');
        const chatContainer = document.getElementById('messagesModal__chatContainer');
        const ids = [];

        for (let i = 0; i < inbox.children.length; i++) {
            ids.push(String(inbox.children[i].id));
        }

        if (!ids.includes(String(message._id)) && message._id !== currentUserId) {
            let htmlObj = document.createElement('div');
            htmlObj.innerHTML = getInboxMessageTemplate(message);
            if (inbox.children[0].tagName === 'P') inbox.removeChild(inbox.children[0]);
            inbox.appendChild(htmlObj.children[0]);
            inbox.lastElementChild.addEventListener('click', openMessage);
            return;
        } else if (chatContainer.childElementCount) {
            const parent = chatContainer.firstElementChild;
            const lastChild = parent.lastElementChild;
            const partnerId = lastChild.value;
            // If the chat is open append the message
            if (connectedUsers[String(partnerId)] === String(from) || from === currentUsername) {
                let htmlObj = document.createElement('div');
                htmlObj.innerHTML = getMessageTemplate(message);
                parent.insertBefore(htmlObj.children[0], lastChild);
                parent.scrollTop = parent.scrollHeight;
            }
            return updateInbox(message, from, to);
        } 

        // if the inbox is open update it
      }

      function getInboxMessageTemplate(message) {
          return `<a class="btn list-group-item list-group-item-action py-3 lh-tight pointer" aria-current="true" id="${message._id}">
            <div class="d-flex w-100 align-items-center justify-content-between">
                <strong class="mb-1" id="${message.username.trim()}">${message.username.trim()}<span class="badge badge-secondary custom-badge ms-2">New</span></strong>
                <small id="${message._id}-date">
                    ${message.timestamp.slice(0, 10).replace('T', ' ')}
                </small>
            </div>
            <div class="col-10 mb-1 small mt-2">
                <strong class="mb-1" id="${message.username.trim()}-username">${message.username.trim()}:</strong>
                <span id="${message.username.trim()}-message">
                    ${message.message.length > 51 ? message.message.slice(0, 50) + '...' : message.message}
                </span>
            </div>
        </a>`;
      }

      function updateInbox(message, from, to) {
          let username, newMessage, newBadgeContainer;
        if (from === currentUsername) {
            username = document.getElementById(`${to}-username`);
            newMessage = document.getElementById(`${to}-message`);
            newBadgeContainer = document.getElementById(to);
        } else {
            username = document.getElementById(`${message.username}-username`);
            newMessage = document.getElementById(`${message.username}-message`);
            newBadgeContainer = document.getElementById(message.username);
            if (newBadgeContainer.childElementCount === 0) {
                const htmlObj = document.createElement('div');
                htmlObj.innerHTML = '<span class="badge badge-secondary custom-badge ms-2">New</span>';
                newBadgeContainer.appendChild(htmlObj.children[0]);
            }
        }

        username.textContent = message.username + ':';
        newMessage.textContent = message.message.length > 51 ? `${message.message.slice(0, 50)}...` : message.message;
        return;
      }

  </script>
  
  <script>
    // GET MESSAGES
      const currentUsername = "<%= currentUser.username %>";
      const currentUserId = "<%= currentUser._id %>";

      const inbox = document.getElementById('inboxMessages');
      const inboxChildren = inbox.children;

      const sendMsgBtn = document.getElementById('sendMessageButton');
      sendMsgBtn.addEventListener('click', sendMessage);

      if (inbox.children[0].textContent.slice(0, 11) !== 'No messages') {
          for (let message of inboxChildren) {
              message.addEventListener('click', openMessage);
          }
      }

      function getMessageTemplate(message) {
            return `
                <span>
                    <div class="d-flex w-100 align-items-center justify-content-between mt-2">
                        <strong class="mb-1">${message.username}</strong>
                        <small>${message.timestamp.slice(0, 19).replace('T', ' ')}</small>
                    </div>
                    <div class="col-10 mb-2 small">${message.message}</div>
                </span>
            `;
      }

      async function openMessage(event) {
        const messageModalButton = document.getElementById('messageModalButton');
        const chatBox = event.target.closest('a');
        const partnerId = chatBox.id;
        const partnerUsername = chatBox.children[0].children[0].textContent.replace('New', '');
        const newBadge = document.getElementById(partnerUsername).lastElementChild;

        let htmlTemplate = '';

        const htmlObj = document.createElement('div');
        htmlObj.className = 'overflow-auto';
        htmlObj. style = 'height: 200px;'

        try {
            const data = await fetch(`http://localhost:3000/message/${partnerId}`, {
                method: 'GET'
            });

            const result = await data.json();

            result.messages.forEach(message => {
                htmlTemplate += getMessageTemplate(message);
            });

            htmlTemplate += `<input type="hidden" name="${partnerUsername}" value="${partnerId}" />`;

            htmlObj.innerHTML = htmlTemplate;

            const chatContainer = document.getElementById('messagesModal__chatContainer');
            if (chatContainer.children.length) chatContainer.removeChild(chatContainer.firstElementChild);
            chatContainer.appendChild(htmlObj);

            messageModalButton.click();
            if (newBadge) newBadge.parentElement.removeChild(newBadge);

            setTimeout(() => {
                chatContainer.firstElementChild.scrollTop = chatContainer.firstElementChild.scrollHeight;
            }, 200);
        } catch (err) {
            console.log(err);
        }
      }

      async function sendMessage(event) {
        const textarea = document.getElementById('messagesModal__messageText'); 
        const content = textarea.value;

        if (content === '') return;

        const lastChild = document.getElementById('messagesModal__chatContainer').firstElementChild.lastElementChild;
        const partnerId = lastChild.value;
        const partnerUsername = lastChild.name;

        try {
            const data = await fetch(`http://localhost:3000/message/${partnerId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    message: {
                        content,
                        async: true,
                        username: currentUsername
                    }
                })
            });
    
            const result = await data.json();
            
            if (result.success) {
                //If user is online
                if (connectedUsers[String(partnerId)]) {
                    socket.emit('private message', {
                        content: result.message,
                        to: connectedUsers[String(partnerId)],
                    })
                }
                pushMessage(result.message, currentUsername, partnerUsername);
                textarea.value = '';
                lastChild.parentElement.scrollTop = lastChild.parentElement.scrollHeight;
            }

        } catch (err) {
            console.log(err);
        }
      }
  </script>